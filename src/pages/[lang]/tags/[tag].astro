---
import { getCollection } from "astro:content";
import LabelTag from "@/components/ui/tags/label-tag";
import PostStack from "@/components/ui/post-stack";
import BaseLayout from "@/layouts/base-layout.astro";
import { supportedLangs } from "@/utils/i18n";
import { useTranslations } from "@/utils/i18n";
import {
  getSnapshots,
  getUniqueLowerCaseTagMap,
  makeUniqueByLang,
} from "@/utils/post";

export const getStaticPaths = async () => {
  const paths = await Promise.all(
    supportedLangs.map(async (lang) => {
      const posts = await getCollection("posts");
      const uniquePosts = makeUniqueByLang(posts, lang);
      const tags = getUniqueLowerCaseTagMap(
        uniquePosts.flatMap((uniquePost) => uniquePost.data.tags)
      );
      return Array.from(tags.keys()).map((tag) => ({
        params: { lang, tag },
      }));
    })
  );
  return paths.flat();
};

const { lang, tag } = Astro.params;
const filteredPosts = await getCollection("posts", (post) =>
  getUniqueLowerCaseTagMap(post.data.tags).get(tag)
);
const filteredSnapshots = await getSnapshots(filteredPosts, lang);
const t = useTranslations(lang);
---

<BaseLayout
  title={`${t("postsWithTag.firstPart")} "${tag}" ${t("postsWithTag.secondPart")}`}
  description={`${t("postsWithTag.description.firstPart")} "${tag}" ${t("postsWithTag.description.secondPart")}`}
  headerAsH1={false}
>
  <article>
    <h1
      class="text-4xl font-black text-dracula-light mb-10 mx-auto leading-loose"
    >
      {t("postsWithTag.firstPart")}
      <LabelTag lang={lang} label={tag} large />
      {t("postsWithTag.secondPart")}
    </h1>
    <PostStack lang={lang} snapshots={filteredSnapshots} client:load />
  </article>
</BaseLayout>
